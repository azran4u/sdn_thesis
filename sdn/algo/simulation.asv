function [ outputG, outputRequestTable ] = simulation( G )
    
    allRevenues = [];

    t=1;
    [requestTable] = createEmptyRequestTable();
    [tempRequestTable] = buildRequestTable(G, requestTable);  
    requestTable = 
    [ tempG, tempRequestTable ] = lbsls( G, requestTable );
    G = tempG;
    requestTable = tempRequestTable;
    currentRevenue = revenue( requestTable );
    allRevenues = [allRevenues currentRevenue];
    
    t=2;
    G = outputG;    
    table = find(strcmp('reciever',G.Nodes.types));
    notActiveRecievers = G.Nodes.recieverPriority(table)==0;
    if( sum(notActiveRecievers) == 0 )
        disp('cannot add user');
    else
        range = table(notActiveRecievers);
         newReciever = range(randsample(length(range),1, true));
%         newReciever = randsample(table(notActiveRecievers),1, true);
        s = RandStream.getGlobalStream;
        G.Nodes.recieverPriority(newReciever) = datasample(s,[1:1:3],1,'Weights',[0.3 0.3 0.4]);
        [tempRequestTable] = buildRequestTable(G, requestTable);  
        requestTable = tempRequestTable;
        [ tempG, tempRequestTable ] = lbsls( G, requestTable );
        G = tempG;
        requestTable = tempRequestTable;
        currentRevenue = revenue( outputRequestTable );
        allRevenues = [allRevenues currentRevenue];
    end
    
%     N = 1;
%     [newRequestTable] = buildRequestTable(G);  
%     allRevenues = [];
%     
%     for t = [1:N]
%         [ newG, tempRequestTable ] = generateSimulation(G, newRequestTable);
%         newRequestTable = tempRequestTable;
%         [ outputG, outputRequestTable ] = lbsls( newG, newRequestTable );
%         currentRevenue = revenue( outputRequestTable );
%         allRevenues = [allRevenues currentRevenue];
%     end
%     
% end